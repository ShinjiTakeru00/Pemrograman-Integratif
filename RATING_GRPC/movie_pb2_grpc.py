# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import movie_pb2 as movie__pb2


class MovieRatingServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.AddRating = channel.unary_unary(
                '/movie.MovieRatingService/AddRating',
                request_serializer=movie__pb2.MovieRating.SerializeToString,
                response_deserializer=movie__pb2.MovieRating.FromString,
                )
        self.GetRating = channel.unary_unary(
                '/movie.MovieRatingService/GetRating',
                request_serializer=movie__pb2.MovieId.SerializeToString,
                response_deserializer=movie__pb2.MovieRating.FromString,
                )
        self.UpdateRating = channel.unary_unary(
                '/movie.MovieRatingService/UpdateRating',
                request_serializer=movie__pb2.MovieRating.SerializeToString,
                response_deserializer=movie__pb2.MovieRating.FromString,
                )
        self.DeleteRating = channel.unary_unary(
                '/movie.MovieRatingService/DeleteRating',
                request_serializer=movie__pb2.MovieId.SerializeToString,
                response_deserializer=movie__pb2.MovieRating.FromString,
                )


class MovieRatingServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def AddRating(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetRating(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateRating(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteRating(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MovieRatingServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'AddRating': grpc.unary_unary_rpc_method_handler(
                    servicer.AddRating,
                    request_deserializer=movie__pb2.MovieRating.FromString,
                    response_serializer=movie__pb2.MovieRating.SerializeToString,
            ),
            'GetRating': grpc.unary_unary_rpc_method_handler(
                    servicer.GetRating,
                    request_deserializer=movie__pb2.MovieId.FromString,
                    response_serializer=movie__pb2.MovieRating.SerializeToString,
            ),
            'UpdateRating': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateRating,
                    request_deserializer=movie__pb2.MovieRating.FromString,
                    response_serializer=movie__pb2.MovieRating.SerializeToString,
            ),
            'DeleteRating': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteRating,
                    request_deserializer=movie__pb2.MovieId.FromString,
                    response_serializer=movie__pb2.MovieRating.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'movie.MovieRatingService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class MovieRatingService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def AddRating(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/movie.MovieRatingService/AddRating',
            movie__pb2.MovieRating.SerializeToString,
            movie__pb2.MovieRating.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetRating(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/movie.MovieRatingService/GetRating',
            movie__pb2.MovieId.SerializeToString,
            movie__pb2.MovieRating.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateRating(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/movie.MovieRatingService/UpdateRating',
            movie__pb2.MovieRating.SerializeToString,
            movie__pb2.MovieRating.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteRating(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/movie.MovieRatingService/DeleteRating',
            movie__pb2.MovieId.SerializeToString,
            movie__pb2.MovieRating.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
